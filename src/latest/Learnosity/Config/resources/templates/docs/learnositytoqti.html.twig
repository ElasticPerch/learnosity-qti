<h3 id="mapping-question-types">Mapping Items and Questions</h3>
<p>Both Learnosity item and questions are mapped to Assessment Item</p>
<hr>

<p><strong>Mapping Rules 101 for Item export</strong></p>
<ul>
    <li>Assessment Item identifier is taken from Item `reference`, however if it's QTI invalid then a random one would be
        generated and previous Learnosity Item `reference` will be stored within `label` attribute.</li>
    <li>Questions within Item are mapped to QTI Interactions. Their identifiers are taken from Question `reference`,
        however if QTI invalid, a random identifier would be generated and the original `reference` will be stored within interaction `label` attributes.</li>
    <li>Some feature and inline features are mapped to QTI `object` element and their `reference`(s) might be saved on `label` attribute. Current supported feature types:
        <ul>
            <li>audioplayer</li>
            <li>videoplayer</li>
            <li>sharedpassage</li>
        </ul>
    </li>
</ul>

<p><strong>Mapping Rules 101 for Question export</strong></p>
<ul>
    <li>Assessment Item identifier is taken from Question `reference`, however if it's invalid then a random one would be
        generated and previous Learnosity Item `reference` will be stored as label.</li>
    <li>Mapping widget type feature is not supported and it will fail.</li>
</ul>
<hr>

<p><strong>Other Mapping Rules 101</strong></p>
<ul>
    <li>Div block might be added to wrap around HTML elements when appropriate. For example, QTI itembody only allow Block elements within its content
        and if original HTML content from Learnosty Item `content` has spans, the transformation library would try its best to wrap it with a div block to make it a valid QTI.</li>
    <li>QTI response declaration object is vastly different than Learnosity. Thus, `alt_responses` and `penalty` are currently ignored.</li>
    <li>We only map our validation object to QTI pre-defined response processing templates, its either `map_response` or `match_correct`.
        If our validation object within Item and its respective questions only contain a score of 1, then it would always be mapped to `match_correct`. Everything else, we would map
        it to `map_response` response processing template.
    </li>
</ul>

<h4>Supported Question Types</h4>
<ul class="link-list">
    {% for questionTypeName, data in questionTypes %}
        <li><a href="#{{ questionTypeName }}">{{ questionTypeName }}</a></li>
    {% endfor %}
</ul>

<p>These question types are currently unsupported:</p>
{% for questionType in unsupportedQuestionTypes %}
    <span class="secondary label">{{ questionType }}</span>
{% endfor %}
<hr>

{% for questionTypeName, data in questionTypes %}
    <h4 style="display: inline-block" id="{{ questionTypeName }}">{{ questionTypeName }}</h4>
    <a style="display: inline-block" href="http://docs.learnosity.com/assessment/questions/questiontypes#{{ questionTypeName }}" target="_blank">(documentation)</a>
    <a style="display: inline-block; float: right; margin-top: 10px;" href="#mapping-question-types">Back to Top</a>

    {% if data.introduction is not empty %}
        <div class="panel">{{ data.introduction|escape }}</div>
    {% endif %}

    {{ _self.generateTables(questionTypeName, data.mapping) }}
    <hr/>
{% endfor %}

{% macro generateTables(name, documentation) %}
    {% if documentation is not empty %}
        <table class="doc-table">
            <tr>
                <th></th>
                <th>Support</th>
                <th>Description</th>
            </tr>
            {% for attributeName, attribute in documentation %}
                <tr>
                    <td class="name">{{ attributeName }}</td>
                    <td class="support-status support-status-{{ attribute.supportStatus|lower }}">{{ attribute.supportStatus }}</td>
                    <td class="description">{{ attribute.description|raw }}</td>
                </tr>
            {% endfor %}
        </table>
    {% endif %}
{% endmacro %}
